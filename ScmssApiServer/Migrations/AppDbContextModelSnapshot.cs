// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ScmssApiServer.Data;

#nullable disable

namespace ScmssApiServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ScmssApiServer.Models.Config", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("VatRate")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Config");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            VatRate = 0.050000000000000003
                        });
                });

            modelBuilder.Entity("ScmssApiServer.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactPerson")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefaultLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactPerson = "Hoa Thi Mai",
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4073),
                            DefaultLocation = "156 Nguyen Van Luong, Bien Hoa, Dong nai",
                            Description = "Flower garden.",
                            Email = "watarichanno@gmail.com",
                            IsActive = true,
                            Name = "Cool Garden 324",
                            PhoneNumber = "0344250401"
                        },
                        new
                        {
                            Id = 2,
                            ContactPerson = "Ha Phi Hung",
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4077),
                            DefaultLocation = "436 Vo Van Kiet, District 1, HCM City",
                            Description = "Plant shop.",
                            Email = "haphihung55@gmail.com",
                            IsActive = true,
                            Name = "Phi Hung Shop",
                            PhoneNumber = "0344250401"
                        });
                });

            modelBuilder.Entity("ScmssApiServer.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("ExpirationMonth")
                        .HasColumnType("integer");

                    b.Property<string>("ImageName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MiscCost")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("NetWeight")
                        .HasColumnType("double precision");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4306),
                            Description = "MSPB: 04513\nProtein total (Nts): 16%\nEffective Phosphate (P2O5hh): 8%\nEffective Potassium (K2Ohh): 8%\nSulfur (S): 13%\nHumidity: 2%\nSuitable for all crops.",
                            ExpirationMonth = 48,
                            ImageName = "1",
                            IsActive = true,
                            MiscCost = 15000m,
                            Name = "NPK 16-8-8+13S",
                            NetWeight = 50.0,
                            Price = 500000m,
                            Unit = "Item(s)"
                        },
                        new
                        {
                            Id = 2,
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4311),
                            Description = "MSPB: 04519\nProtein total (Nts): 16%\nEffective Phosphate (P2O5hh): 7%\nEffective Potassium (K2Ohh): 18%\nSulfur (S): 12%\nBo (B): 217ppm\nZinc (Zn): 400ppm\nHumidity: 2%\nSuitable for coffee, fruit, rubber, vegetable, rice crops.",
                            ExpirationMonth = 48,
                            ImageName = "2",
                            IsActive = true,
                            MiscCost = 18000m,
                            Name = "NPK 16-7-18+12S+TE",
                            NetWeight = 50.0,
                            Price = 600000m,
                            Unit = "Item(s)"
                        });
                });

            modelBuilder.Entity("ScmssApiServer.Models.ProductSupplyCostItem", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("SupplyId")
                        .HasColumnType("integer");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.HasKey("ProductId", "SupplyId");

                    b.HasIndex("SupplyId");

                    b.ToTable("ProductSupplyCostItem");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            SupplyId = 1,
                            Quantity = 20.600000000000001
                        },
                        new
                        {
                            ProductId = 1,
                            SupplyId = 2,
                            Quantity = 8.0
                        },
                        new
                        {
                            ProductId = 1,
                            SupplyId = 3,
                            Quantity = 8.0
                        },
                        new
                        {
                            ProductId = 1,
                            SupplyId = 4,
                            Quantity = 13.0
                        },
                        new
                        {
                            ProductId = 2,
                            SupplyId = 1,
                            Quantity = 16.0
                        },
                        new
                        {
                            ProductId = 2,
                            SupplyId = 2,
                            Quantity = 8.0
                        },
                        new
                        {
                            ProductId = 2,
                            SupplyId = 3,
                            Quantity = 13.0
                        },
                        new
                        {
                            ProductId = 2,
                            SupplyId = 4,
                            Quantity = 10.0
                        },
                        new
                        {
                            ProductId = 2,
                            SupplyId = 5,
                            Quantity = 1.5
                        },
                        new
                        {
                            ProductId = 2,
                            SupplyId = 6,
                            Quantity = 1.5
                        });
                });

            modelBuilder.Entity("ScmssApiServer.Models.ProductionFacility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ProductionFacilities");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4120),
                            Description = "Primary production facility",
                            Email = "godau@cool-fertilizer.com.vn",
                            IsActive = true,
                            Location = "Go Dau Industrial Park, Phuoc Thai, Long Thanh, Dong Nai",
                            Name = "Go Dau",
                            PhoneNumber = "02837560110"
                        },
                        new
                        {
                            Id = 2,
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4123),
                            Description = "Secondary production facility",
                            Email = "longan@cool-fertilizer.com.vn",
                            IsActive = true,
                            Location = "Long Dinh Industrial Park, Long Dinh, Can Duoc, Long An",
                            Name = "Binh Dien - Long An",
                            PhoneNumber = "02723726627"
                        });
                });

            modelBuilder.Entity("ScmssApiServer.Models.ProductionOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("integer");

                    b.Property<string>("ApproveProductionManagerId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EndUserId")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("ExecutionDuration")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("ExecutionFinishTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Problem")
                        .HasColumnType("text");

                    b.Property<int>("ProductionFacilityId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalProfit")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ApproveProductionManagerId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("EndUserId");

                    b.HasIndex("ProductionFacilityId");

                    b.ToTable("ProductionOrders");
                });

            modelBuilder.Entity("ScmssApiServer.Models.ProductionOrderEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ProductionOrderId");

                    b.ToTable("ProductionOrderEvent");
                });

            modelBuilder.Entity("ScmssApiServer.Models.ProductionOrderItem", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalValue")
                        .HasColumnType("numeric");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("numeric");

                    b.Property<decimal>("UnitValue")
                        .HasColumnType("numeric");

                    b.HasKey("ItemId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("ProductionOrderItems");
                });

            modelBuilder.Entity("ScmssApiServer.Models.ProductionOrderSupplyUsageItem", b =>
                {
                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("integer");

                    b.Property<int>("SupplyId")
                        .HasColumnType("integer");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("numeric");

                    b.HasKey("ProductionOrderId", "SupplyId");

                    b.HasIndex("SupplyId");

                    b.ToTable("ProductionOrderSupplyUsageItems");
                });

            modelBuilder.Entity("ScmssApiServer.Models.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AdditionalDiscount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DiscountSubtotal")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EndUserId")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("ExecutionDuration")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("ExecutionFinishTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FromLocation")
                        .HasColumnType("text");

                    b.Property<string>("InvoiceName")
                        .HasColumnType("text");

                    b.Property<decimal>("NetSubtotal")
                        .HasColumnType("numeric");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Problem")
                        .HasColumnType("text");

                    b.Property<int>("ProductionFacilityId")
                        .HasColumnType("integer");

                    b.Property<int?>("PurchaseRequisitionId")
                        .HasColumnType("integer");

                    b.Property<string>("ReceiptName")
                        .HasColumnType("text");

                    b.Property<decimal>("RemainingAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("numeric");

                    b.Property<string>("ToLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("numeric");

                    b.Property<double>("VatRate")
                        .HasColumnType("double precision");

                    b.Property<int>("VendorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("EndUserId");

                    b.HasIndex("ProductionFacilityId");

                    b.HasIndex("PurchaseRequisitionId");

                    b.HasIndex("VendorId");

                    b.ToTable("PurchaseOrders");
                });

            modelBuilder.Entity("ScmssApiServer.Models.PurchaseOrderEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseOrderEvent");
                });

            modelBuilder.Entity("ScmssApiServer.Models.PurchaseOrderItem", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Discount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("NetPrice")
                        .HasColumnType("numeric");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("ItemId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("PurchaseOrderItems");
                });

            modelBuilder.Entity("ScmssApiServer.Models.PurchaseRequisition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ApprovalStatus")
                        .HasColumnType("integer");

                    b.Property<string>("ApproveFinanceId")
                        .HasColumnType("text");

                    b.Property<string>("ApproveProductionManagerId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EndUserId")
                        .HasColumnType("text");

                    b.Property<string>("Problem")
                        .HasColumnType("text");

                    b.Property<int>("ProductionFacilityId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("numeric");

                    b.Property<double>("VatRate")
                        .HasColumnType("double precision");

                    b.Property<int>("VendorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApproveFinanceId");

                    b.HasIndex("ApproveProductionManagerId");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("EndUserId");

                    b.HasIndex("ProductionFacilityId");

                    b.HasIndex("VendorId");

                    b.ToTable("PurchaseRequisitions");
                });

            modelBuilder.Entity("ScmssApiServer.Models.PurchaseRequisitionItem", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("ItemId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("PurchaseRequisitionItem");
                });

            modelBuilder.Entity("ScmssApiServer.Models.SalesOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreateUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EndUserId")
                        .HasColumnType("text");

                    b.Property<TimeSpan?>("ExecutionDuration")
                        .HasColumnType("interval");

                    b.Property<DateTime?>("ExecutionFinishTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FromLocation")
                        .HasColumnType("text");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Problem")
                        .HasColumnType("text");

                    b.Property<int?>("ProductionFacilityId")
                        .HasColumnType("integer");

                    b.Property<decimal>("RemainingAmount")
                        .HasColumnType("numeric");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("numeric");

                    b.Property<string>("ToLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("VatAmount")
                        .HasColumnType("numeric");

                    b.Property<double>("VatRate")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CreateUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EndUserId");

                    b.HasIndex("ProductionFacilityId");

                    b.ToTable("SalesOrders");
                });

            modelBuilder.Entity("ScmssApiServer.Models.SalesOrderEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<int>("SalesOrderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("SalesOrderEvent");
                });

            modelBuilder.Entity("ScmssApiServer.Models.SalesOrderItem", b =>
                {
                    b.Property<int>("ItemId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("numeric");

                    b.HasKey("ItemId", "OrderId");

                    b.HasIndex("OrderId");

                    b.ToTable("SalesOrderItems");
                });

            modelBuilder.Entity("ScmssApiServer.Models.Supply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("ExpirationMonth")
                        .HasColumnType("integer");

                    b.Property<string>("ImageName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("VendorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("VendorId");

                    b.ToTable("Supplies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4195),
                            Description = "CO(NH2)2 for nitrogen.",
                            ExpirationMonth = 12,
                            ImageName = "1",
                            IsActive = true,
                            Name = "PVFCCo Urea",
                            Price = 5000m,
                            Unit = "Kg",
                            VendorId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4198),
                            Description = "P2O5 for phosphorous.",
                            ExpirationMonth = 12,
                            ImageName = "2",
                            IsActive = true,
                            Name = "PVFCCo Phosphorous",
                            Price = 6000m,
                            Unit = "Kg",
                            VendorId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4202),
                            Description = "KCl for potassium.",
                            ExpirationMonth = 12,
                            IsActive = true,
                            Name = "PVFCCo Potassium Chloride",
                            Price = 5000m,
                            Unit = "Kg",
                            VendorId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4205),
                            Description = "(NH4)2SO4 for trace sulfur.",
                            ExpirationMonth = 12,
                            IsActive = true,
                            Name = "Vinachem Ammonium Sulphate",
                            Price = 13000m,
                            Unit = "Kg",
                            VendorId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4208),
                            Description = "H3BO3 for trace boron.",
                            ExpirationMonth = 12,
                            IsActive = true,
                            Name = "Vinachem Boric Acid",
                            Price = 38000m,
                            Unit = "Kg",
                            VendorId = 2
                        },
                        new
                        {
                            Id = 6,
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4264),
                            Description = "ZnSO4 for trace zinc.",
                            ExpirationMonth = 12,
                            IsActive = true,
                            Name = "Vinachem Zinc Sulphate",
                            Price = 40000m,
                            Unit = "Kg",
                            VendorId = 2
                        });
                });

            modelBuilder.Entity("ScmssApiServer.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IdCardNumber")
                        .HasMaxLength(12)
                        .HasColumnType("char(12)");

                    b.Property<string>("ImageName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<int?>("ProductionFacilityId")
                        .HasColumnType("integer");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("ProductionFacilityId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ScmssApiServer.Models.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactPerson")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DefaultLocation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Vendors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactPerson = "Ha Long Anh",
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4156),
                            DefaultLocation = "Phu My Industrial Park, Phu My, Phu My, Ba Ria - Vung Tau",
                            Description = "Main vendor for major ingredients.",
                            Email = "customer@pvfcco.com.vn",
                            IsActive = true,
                            Name = "PVFCCo",
                            PhoneNumber = "02838256258"
                        },
                        new
                        {
                            Id = 2,
                            ContactPerson = "Nguyen Thanh Long",
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4159),
                            DefaultLocation = "Binh Duong Industrial Park, An Binh, Di An, Binh Duong",
                            Description = "Main vendor for trace ingredients.",
                            Email = "order@vinachem.com.vn",
                            IsActive = true,
                            Name = "Vinachem",
                            PhoneNumber = "02438240551"
                        });
                });

            modelBuilder.Entity("ScmssApiServer.Models.WarehouseProductItem", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductionFacilityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ProductId", "ProductionFacilityId");

                    b.HasIndex("ProductionFacilityId");

                    b.ToTable("WarehouseProductItems");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            ProductionFacilityId = 1,
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4752),
                            Quantity = 400.0
                        },
                        new
                        {
                            ProductId = 2,
                            ProductionFacilityId = 1,
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4755),
                            Quantity = 300.0
                        },
                        new
                        {
                            ProductId = 1,
                            ProductionFacilityId = 2,
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4756),
                            Quantity = 700.0
                        },
                        new
                        {
                            ProductId = 2,
                            ProductionFacilityId = 2,
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4757),
                            Quantity = 600.0
                        });
                });

            modelBuilder.Entity("ScmssApiServer.Models.WarehouseProductItemEvent", b =>
                {
                    b.Property<int>("WarehouseProductItemProductId")
                        .HasColumnType("integer");

                    b.Property<int>("WarehouseProductItemProductionFacilityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Change")
                        .HasColumnType("double precision");

                    b.Property<int?>("ProductionOrderId")
                        .HasColumnType("integer");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<int?>("SalesOrderId")
                        .HasColumnType("integer");

                    b.HasKey("WarehouseProductItemProductId", "WarehouseProductItemProductionFacilityId", "Time");

                    b.HasIndex("ProductionOrderId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("WarehouseProductItemEvent");

                    b.HasData(
                        new
                        {
                            WarehouseProductItemProductId = 1,
                            WarehouseProductItemProductionFacilityId = 1,
                            Time = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4805),
                            Change = 400.0,
                            Quantity = 400.0
                        },
                        new
                        {
                            WarehouseProductItemProductId = 2,
                            WarehouseProductItemProductionFacilityId = 1,
                            Time = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4862),
                            Change = 300.0,
                            Quantity = 300.0
                        },
                        new
                        {
                            WarehouseProductItemProductId = 1,
                            WarehouseProductItemProductionFacilityId = 2,
                            Time = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4863),
                            Change = 700.0,
                            Quantity = 700.0
                        },
                        new
                        {
                            WarehouseProductItemProductId = 2,
                            WarehouseProductItemProductionFacilityId = 2,
                            Time = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4864),
                            Change = 600.0,
                            Quantity = 600.0
                        });
                });

            modelBuilder.Entity("ScmssApiServer.Models.WarehouseSupplyItem", b =>
                {
                    b.Property<int>("ProductionFacilityId")
                        .HasColumnType("integer");

                    b.Property<int>("SupplyId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ProductionFacilityId", "SupplyId");

                    b.HasIndex("SupplyId");

                    b.ToTable("WarehouseSupplyItems");

                    b.HasData(
                        new
                        {
                            ProductionFacilityId = 1,
                            SupplyId = 1,
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4596),
                            Quantity = 13000.0
                        },
                        new
                        {
                            ProductionFacilityId = 1,
                            SupplyId = 2,
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4600),
                            Quantity = 12500.0
                        },
                        new
                        {
                            ProductionFacilityId = 1,
                            SupplyId = 3,
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4602),
                            Quantity = 12500.0
                        },
                        new
                        {
                            ProductionFacilityId = 1,
                            SupplyId = 4,
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4603),
                            Quantity = 12000.0
                        },
                        new
                        {
                            ProductionFacilityId = 1,
                            SupplyId = 5,
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4604),
                            Quantity = 1800.0
                        },
                        new
                        {
                            ProductionFacilityId = 1,
                            SupplyId = 6,
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4606),
                            Quantity = 1800.0
                        },
                        new
                        {
                            ProductionFacilityId = 2,
                            SupplyId = 1,
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4607),
                            Quantity = 12000.0
                        },
                        new
                        {
                            ProductionFacilityId = 2,
                            SupplyId = 2,
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4609),
                            Quantity = 12000.0
                        },
                        new
                        {
                            ProductionFacilityId = 2,
                            SupplyId = 3,
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4610),
                            Quantity = 12500.0
                        },
                        new
                        {
                            ProductionFacilityId = 2,
                            SupplyId = 4,
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4612),
                            Quantity = 11000.0
                        },
                        new
                        {
                            ProductionFacilityId = 2,
                            SupplyId = 5,
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4613),
                            Quantity = 1500.0
                        },
                        new
                        {
                            ProductionFacilityId = 2,
                            SupplyId = 6,
                            CreateTime = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4614),
                            Quantity = 1500.0
                        });
                });

            modelBuilder.Entity("ScmssApiServer.Models.WarehouseSupplyItemEvent", b =>
                {
                    b.Property<int>("WarehouseSupplyItemSupplyId")
                        .HasColumnType("integer");

                    b.Property<int>("WarehouseSupplyItemProductionFacilityId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Change")
                        .HasColumnType("double precision");

                    b.Property<int?>("ProductionOrderId")
                        .HasColumnType("integer");

                    b.Property<int?>("PurchaseOrderId")
                        .HasColumnType("integer");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.HasKey("WarehouseSupplyItemSupplyId", "WarehouseSupplyItemProductionFacilityId", "Time");

                    b.HasIndex("ProductionOrderId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("WarehouseSupplyItemProductionFacilityId", "WarehouseSupplyItemSupplyId");

                    b.ToTable("WarehouseSupplyItemEvent");

                    b.HasData(
                        new
                        {
                            WarehouseSupplyItemSupplyId = 1,
                            WarehouseSupplyItemProductionFacilityId = 1,
                            Time = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4683),
                            Change = 13000.0,
                            Quantity = 13000.0
                        },
                        new
                        {
                            WarehouseSupplyItemSupplyId = 2,
                            WarehouseSupplyItemProductionFacilityId = 1,
                            Time = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4688),
                            Change = 12500.0,
                            Quantity = 12500.0
                        },
                        new
                        {
                            WarehouseSupplyItemSupplyId = 3,
                            WarehouseSupplyItemProductionFacilityId = 1,
                            Time = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4689),
                            Change = 12500.0,
                            Quantity = 12500.0
                        },
                        new
                        {
                            WarehouseSupplyItemSupplyId = 4,
                            WarehouseSupplyItemProductionFacilityId = 1,
                            Time = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4698),
                            Change = 12000.0,
                            Quantity = 12000.0
                        },
                        new
                        {
                            WarehouseSupplyItemSupplyId = 5,
                            WarehouseSupplyItemProductionFacilityId = 1,
                            Time = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4698),
                            Change = 1800.0,
                            Quantity = 1800.0
                        },
                        new
                        {
                            WarehouseSupplyItemSupplyId = 6,
                            WarehouseSupplyItemProductionFacilityId = 1,
                            Time = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4699),
                            Change = 1800.0,
                            Quantity = 1800.0
                        },
                        new
                        {
                            WarehouseSupplyItemSupplyId = 1,
                            WarehouseSupplyItemProductionFacilityId = 2,
                            Time = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4699),
                            Change = 12000.0,
                            Quantity = 12000.0
                        },
                        new
                        {
                            WarehouseSupplyItemSupplyId = 2,
                            WarehouseSupplyItemProductionFacilityId = 2,
                            Time = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4700),
                            Change = 12000.0,
                            Quantity = 12000.0
                        },
                        new
                        {
                            WarehouseSupplyItemSupplyId = 3,
                            WarehouseSupplyItemProductionFacilityId = 2,
                            Time = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4700),
                            Change = 12500.0,
                            Quantity = 12500.0
                        },
                        new
                        {
                            WarehouseSupplyItemSupplyId = 4,
                            WarehouseSupplyItemProductionFacilityId = 2,
                            Time = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4701),
                            Change = 11000.0,
                            Quantity = 11000.0
                        },
                        new
                        {
                            WarehouseSupplyItemSupplyId = 5,
                            WarehouseSupplyItemProductionFacilityId = 2,
                            Time = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4701),
                            Change = 1500.0,
                            Quantity = 1500.0
                        },
                        new
                        {
                            WarehouseSupplyItemSupplyId = 6,
                            WarehouseSupplyItemProductionFacilityId = 2,
                            Time = new DateTime(2023, 12, 27, 19, 8, 49, 200, DateTimeKind.Utc).AddTicks(4702),
                            Change = 1500.0,
                            Quantity = 1500.0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ScmssApiServer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ScmssApiServer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScmssApiServer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ScmssApiServer.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ScmssApiServer.Models.ProductSupplyCostItem", b =>
                {
                    b.HasOne("ScmssApiServer.Models.Product", "Product")
                        .WithMany("SupplyCostItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScmssApiServer.Models.Supply", "Supply")
                        .WithMany("ProductionCostItems")
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("ScmssApiServer.Models.ProductionOrder", b =>
                {
                    b.HasOne("ScmssApiServer.Models.User", "ApproveProductionManager")
                        .WithMany("ApprovedProductionOrdersAsManager")
                        .HasForeignKey("ApproveProductionManagerId");

                    b.HasOne("ScmssApiServer.Models.User", "CreateUser")
                        .WithMany("CreatedProductionOrders")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScmssApiServer.Models.User", "EndUser")
                        .WithMany("FinishedProductionOrders")
                        .HasForeignKey("EndUserId");

                    b.HasOne("ScmssApiServer.Models.ProductionFacility", "ProductionFacility")
                        .WithMany("ProductionOrder")
                        .HasForeignKey("ProductionFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApproveProductionManager");

                    b.Navigation("CreateUser");

                    b.Navigation("EndUser");

                    b.Navigation("ProductionFacility");
                });

            modelBuilder.Entity("ScmssApiServer.Models.ProductionOrderEvent", b =>
                {
                    b.HasOne("ScmssApiServer.Models.ProductionOrder", "ProductionOrder")
                        .WithMany("Events")
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionOrder");
                });

            modelBuilder.Entity("ScmssApiServer.Models.ProductionOrderItem", b =>
                {
                    b.HasOne("ScmssApiServer.Models.Product", "Product")
                        .WithMany("ProductionOrderItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScmssApiServer.Models.ProductionOrder", "ProductionOrder")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductionOrder");
                });

            modelBuilder.Entity("ScmssApiServer.Models.ProductionOrderSupplyUsageItem", b =>
                {
                    b.HasOne("ScmssApiServer.Models.ProductionOrder", "ProductionOrder")
                        .WithMany("SupplyUsageItems")
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScmssApiServer.Models.Supply", "Supply")
                        .WithMany("SupplyUsageItems")
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionOrder");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("ScmssApiServer.Models.PurchaseOrder", b =>
                {
                    b.HasOne("ScmssApiServer.Models.User", "CreateUser")
                        .WithMany("CreatedPurchaseOrders")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScmssApiServer.Models.User", "EndUser")
                        .WithMany("FinishedPurchaseOrders")
                        .HasForeignKey("EndUserId");

                    b.HasOne("ScmssApiServer.Models.ProductionFacility", "ProductionFacility")
                        .WithMany()
                        .HasForeignKey("ProductionFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScmssApiServer.Models.PurchaseRequisition", "PurchaseRequisition")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("PurchaseRequisitionId");

                    b.HasOne("ScmssApiServer.Models.Vendor", "Vendor")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("EndUser");

                    b.Navigation("ProductionFacility");

                    b.Navigation("PurchaseRequisition");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("ScmssApiServer.Models.PurchaseOrderEvent", b =>
                {
                    b.HasOne("ScmssApiServer.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Events")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("ScmssApiServer.Models.PurchaseOrderItem", b =>
                {
                    b.HasOne("ScmssApiServer.Models.Supply", "Supply")
                        .WithMany("PurchaseOrderItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScmssApiServer.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("ScmssApiServer.Models.PurchaseRequisition", b =>
                {
                    b.HasOne("ScmssApiServer.Models.User", "ApproveFinance")
                        .WithMany("ApprovedPurchaseRequisitionsAsFinance")
                        .HasForeignKey("ApproveFinanceId");

                    b.HasOne("ScmssApiServer.Models.User", "ApproveProductionManager")
                        .WithMany("ApprovedPurchaseRequisitionsAsManager")
                        .HasForeignKey("ApproveProductionManagerId");

                    b.HasOne("ScmssApiServer.Models.User", "CreateUser")
                        .WithMany("CreatedPurchaseRequisitions")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScmssApiServer.Models.User", "EndUser")
                        .WithMany("FinishedPurchaseRequisitions")
                        .HasForeignKey("EndUserId");

                    b.HasOne("ScmssApiServer.Models.ProductionFacility", "ProductionFacility")
                        .WithMany()
                        .HasForeignKey("ProductionFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScmssApiServer.Models.Vendor", "Vendor")
                        .WithMany("PurchaseRequisitions")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApproveFinance");

                    b.Navigation("ApproveProductionManager");

                    b.Navigation("CreateUser");

                    b.Navigation("EndUser");

                    b.Navigation("ProductionFacility");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("ScmssApiServer.Models.PurchaseRequisitionItem", b =>
                {
                    b.HasOne("ScmssApiServer.Models.Supply", "Supply")
                        .WithMany("PurchaseRequisitionItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScmssApiServer.Models.PurchaseRequisition", "PurchaseRequisition")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurchaseRequisition");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("ScmssApiServer.Models.SalesOrder", b =>
                {
                    b.HasOne("ScmssApiServer.Models.User", "CreateUser")
                        .WithMany("CreatedSalesOrders")
                        .HasForeignKey("CreateUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScmssApiServer.Models.Customer", "Customer")
                        .WithMany("SalesOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScmssApiServer.Models.User", "EndUser")
                        .WithMany("FinishedSalesOrders")
                        .HasForeignKey("EndUserId");

                    b.HasOne("ScmssApiServer.Models.ProductionFacility", "ProductionFacility")
                        .WithMany()
                        .HasForeignKey("ProductionFacilityId");

                    b.Navigation("CreateUser");

                    b.Navigation("Customer");

                    b.Navigation("EndUser");

                    b.Navigation("ProductionFacility");
                });

            modelBuilder.Entity("ScmssApiServer.Models.SalesOrderEvent", b =>
                {
                    b.HasOne("ScmssApiServer.Models.SalesOrder", "SalesOrder")
                        .WithMany("Events")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("ScmssApiServer.Models.SalesOrderItem", b =>
                {
                    b.HasOne("ScmssApiServer.Models.Product", "Product")
                        .WithMany("SalesOrderItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScmssApiServer.Models.SalesOrder", "SalesOrder")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("ScmssApiServer.Models.Supply", b =>
                {
                    b.HasOne("ScmssApiServer.Models.Vendor", "Vendor")
                        .WithMany("Supplies")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("ScmssApiServer.Models.User", b =>
                {
                    b.HasOne("ScmssApiServer.Models.ProductionFacility", "ProductionFacility")
                        .WithMany("Users")
                        .HasForeignKey("ProductionFacilityId");

                    b.Navigation("ProductionFacility");
                });

            modelBuilder.Entity("ScmssApiServer.Models.WarehouseProductItem", b =>
                {
                    b.HasOne("ScmssApiServer.Models.Product", "Product")
                        .WithMany("WarehouseProductItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScmssApiServer.Models.ProductionFacility", "ProductionFacility")
                        .WithMany("WarehouseProductItems")
                        .HasForeignKey("ProductionFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("ProductionFacility");
                });

            modelBuilder.Entity("ScmssApiServer.Models.WarehouseProductItemEvent", b =>
                {
                    b.HasOne("ScmssApiServer.Models.ProductionOrder", "ProductionOrder")
                        .WithMany("WarehouseProductItemEvents")
                        .HasForeignKey("ProductionOrderId");

                    b.HasOne("ScmssApiServer.Models.SalesOrder", "SalesOrder")
                        .WithMany("WarehouseProductItemEvents")
                        .HasForeignKey("SalesOrderId");

                    b.HasOne("ScmssApiServer.Models.WarehouseProductItem", "WarehouseProductItem")
                        .WithMany("Events")
                        .HasForeignKey("WarehouseProductItemProductId", "WarehouseProductItemProductionFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionOrder");

                    b.Navigation("SalesOrder");

                    b.Navigation("WarehouseProductItem");
                });

            modelBuilder.Entity("ScmssApiServer.Models.WarehouseSupplyItem", b =>
                {
                    b.HasOne("ScmssApiServer.Models.ProductionFacility", "ProductionFacility")
                        .WithMany("WarehouseSupplyItems")
                        .HasForeignKey("ProductionFacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScmssApiServer.Models.Supply", "Supply")
                        .WithMany("WarehouseSupplyItems")
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionFacility");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("ScmssApiServer.Models.WarehouseSupplyItemEvent", b =>
                {
                    b.HasOne("ScmssApiServer.Models.ProductionOrder", "ProductionOrder")
                        .WithMany("WarehouseSupplyItemEvents")
                        .HasForeignKey("ProductionOrderId");

                    b.HasOne("ScmssApiServer.Models.PurchaseOrder", "PurchaseOrder")
                        .WithMany("WarehouseSupplyItemEvents")
                        .HasForeignKey("PurchaseOrderId");

                    b.HasOne("ScmssApiServer.Models.WarehouseSupplyItem", "WarehouseSupplyItem")
                        .WithMany("Events")
                        .HasForeignKey("WarehouseSupplyItemProductionFacilityId", "WarehouseSupplyItemSupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionOrder");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("WarehouseSupplyItem");
                });

            modelBuilder.Entity("ScmssApiServer.Models.Customer", b =>
                {
                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("ScmssApiServer.Models.Product", b =>
                {
                    b.Navigation("ProductionOrderItems");

                    b.Navigation("SalesOrderItems");

                    b.Navigation("SupplyCostItems");

                    b.Navigation("WarehouseProductItems");
                });

            modelBuilder.Entity("ScmssApiServer.Models.ProductionFacility", b =>
                {
                    b.Navigation("ProductionOrder");

                    b.Navigation("Users");

                    b.Navigation("WarehouseProductItems");

                    b.Navigation("WarehouseSupplyItems");
                });

            modelBuilder.Entity("ScmssApiServer.Models.ProductionOrder", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Items");

                    b.Navigation("SupplyUsageItems");

                    b.Navigation("WarehouseProductItemEvents");

                    b.Navigation("WarehouseSupplyItemEvents");
                });

            modelBuilder.Entity("ScmssApiServer.Models.PurchaseOrder", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Items");

                    b.Navigation("WarehouseSupplyItemEvents");
                });

            modelBuilder.Entity("ScmssApiServer.Models.PurchaseRequisition", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("ScmssApiServer.Models.SalesOrder", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Items");

                    b.Navigation("WarehouseProductItemEvents");
                });

            modelBuilder.Entity("ScmssApiServer.Models.Supply", b =>
                {
                    b.Navigation("ProductionCostItems");

                    b.Navigation("PurchaseOrderItems");

                    b.Navigation("PurchaseRequisitionItems");

                    b.Navigation("SupplyUsageItems");

                    b.Navigation("WarehouseSupplyItems");
                });

            modelBuilder.Entity("ScmssApiServer.Models.User", b =>
                {
                    b.Navigation("ApprovedProductionOrdersAsManager");

                    b.Navigation("ApprovedPurchaseRequisitionsAsFinance");

                    b.Navigation("ApprovedPurchaseRequisitionsAsManager");

                    b.Navigation("CreatedProductionOrders");

                    b.Navigation("CreatedPurchaseOrders");

                    b.Navigation("CreatedPurchaseRequisitions");

                    b.Navigation("CreatedSalesOrders");

                    b.Navigation("FinishedProductionOrders");

                    b.Navigation("FinishedPurchaseOrders");

                    b.Navigation("FinishedPurchaseRequisitions");

                    b.Navigation("FinishedSalesOrders");
                });

            modelBuilder.Entity("ScmssApiServer.Models.Vendor", b =>
                {
                    b.Navigation("PurchaseOrders");

                    b.Navigation("PurchaseRequisitions");

                    b.Navigation("Supplies");
                });

            modelBuilder.Entity("ScmssApiServer.Models.WarehouseProductItem", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("ScmssApiServer.Models.WarehouseSupplyItem", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
